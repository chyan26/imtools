<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.1">
  <compounddef id="calculate_8cpp" kind="file">
    <compoundname>calculate.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">string</includes>
    <includes local="no">math.h</includes>
    <incdepgraph>
      <node id="0">
        <label>calculate.cpp</label>
        <link refid="calculate.cpp"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="3">
        <label>math.h</label>
      </node>
      <node id="1">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="calculate_8cpp_1a85a69dd703a28a51142294036a464907" prot="public" static="no">
        <name>ELEM_SWAP</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>{register float t=(a);(a)=(b);(b)=t; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/chyan/Documents/workspace/readimage/src/calculate.cpp" line="92" bodyfile="/Users/chyan/Documents/workspace/readimage/src/calculate.cpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="calculate_8cpp_1ae1dd96623292aa543d16c28d1b6ce211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * strndup</definition>
        <argsstring>(const char *s, size_t n)</argsstring>
        <name>strndup</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>A function to duplicate certain place of string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>is a pointer of a char array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of char used for duplication </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to duplicated array </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/chyan/Documents/workspace/readimage/src/calculate.cpp" line="21" bodyfile="/Users/chyan/Documents/workspace/readimage/src/calculate.cpp" bodystart="20" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="calculate_8cpp_1a05fa741986697ad3ec55a068f584c80d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long gd2jd</definition>
        <argsstring>(int y, int m, int d)</argsstring>
        <name>gd2jd</name>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Core function for calculating Julian day. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
<parametername>:</parametername>
</parameternamelist>
<parameterdescription>
<para>year </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
<parametername>:</parametername>
</parameternamelist>
<parameterdescription>
<para>month </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
<parametername>:</parametername>
</parameternamelist>
<parameterdescription>
<para>day </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the Julian day </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/chyan/Documents/workspace/readimage/src/calculate.cpp" line="44" bodyfile="/Users/chyan/Documents/workspace/readimage/src/calculate.cpp" bodystart="44" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="calculate_8cpp_1a95dac4e038745495a6370c2ac585eb8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long str2jd</definition>
        <argsstring>(const char *gd)</argsstring>
        <name>str2jd</name>
        <param>
          <type>const char *</type>
          <declname>gd</declname>
        </param>
        <briefdescription>
<para>Convert a date string to Julian day. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gd</parametername>
</parameternamelist>
<parameterdescription>
<para>the point to the date string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the julian day </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/chyan/Documents/workspace/readimage/src/calculate.cpp" line="59" bodyfile="/Users/chyan/Documents/workspace/readimage/src/calculate.cpp" bodystart="59" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="calculate_8cpp_1ae56c9db9e021bbe02966b285e185221e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float GetAverage</definition>
        <argsstring>(float arr[], int n)</argsstring>
        <name>GetAverage</name>
        <param>
          <type>float</type>
          <declname>arr</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>This function calculates the mean value of a image array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arr[]</parametername>
</parameternamelist>
<parameterdescription>
<para>is the image </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of pixels in the image </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/chyan/Documents/workspace/readimage/src/calculate.cpp" line="82" bodyfile="/Users/chyan/Documents/workspace/readimage/src/calculate.cpp" bodystart="81" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="calculate_8cpp_1a486ca264d9e2fdf49d4767ca89b06477" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float GetMedian</definition>
        <argsstring>(float arr[], int n)</argsstring>
        <name>GetMedian</name>
        <param>
          <type>float</type>
          <declname>arr</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>This function is the quick_select routine based on the algorithm found in Numerical Recipes in C. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arr[]</parametername>
</parameternamelist>
<parameterdescription>
<para>is the image </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of pixels in the image </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>median value of an array </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/chyan/Documents/workspace/readimage/src/calculate.cpp" line="104" bodyfile="/Users/chyan/Documents/workspace/readimage/src/calculate.cpp" bodystart="103" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="calculate_8cpp_1a876eef77c12c4bffd6163bd902abbc9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float GetMedianDev</definition>
        <argsstring>(float arr[], int n, float median)</argsstring>
        <name>GetMedianDev</name>
        <param>
          <type>float</type>
          <declname>arr</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float</type>
          <declname>median</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Return the median deviation</para><para>0.674433 is magic number such that this deviation is the same as a classic standard deviation assuming a normal distribution function (gaussian)</para>        </inbodydescription>
        <location file="/Users/chyan/Documents/workspace/readimage/src/calculate.cpp" line="162" bodyfile="/Users/chyan/Documents/workspace/readimage/src/calculate.cpp" bodystart="161" bodyend="178"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file defines the functions that will be used for imaeg processing Created on: Aug 17, 2010 Author: chyan. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="7"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><ref refid="calculate_8cpp_1ae1dd96623292aa543d16c28d1b6ce211" kindref="member" tooltip="A function to duplicate certain place of string.">strndup</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*result;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strlen<sp/>(s);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>len)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc<sp/>(len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>result[len]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>memcpy<sp/>(result,<sp/>s,<sp/>len);</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="calculate_8cpp_1a05fa741986697ad3ec55a068f584c80d" kindref="member" tooltip="Core function for calculating Julian day.">gd2jd</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d){</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/>y+=8000;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m&lt;3)<sp/>{<sp/>y--;<sp/>m+=12;<sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(y*365)<sp/>+(y/4)<sp/>-(y/100)<sp/>+(y/400)<sp/>-1200820</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+(m*153+3)/5-92</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+d-1;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="calculate_8cpp_1a95dac4e038745495a6370c2ac585eb8e" kindref="member" tooltip="Convert a date string to Julian day.">str2jd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>gd){</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//char<sp/>*y,*m,;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,m,d;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*date;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/>date=strdup(gd);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/>y=atoi(<ref refid="calculate_8cpp_1ae1dd96623292aa543d16c28d1b6ce211" kindref="member" tooltip="A function to duplicate certain place of string.">strndup</ref>(date,4));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/>m=atoi(<ref refid="calculate_8cpp_1ae1dd96623292aa543d16c28d1b6ce211" kindref="member" tooltip="A function to duplicate certain place of string.">strndup</ref>(date+6,2));</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/>d=atoi(<ref refid="calculate_8cpp_1ae1dd96623292aa543d16c28d1b6ce211" kindref="member" tooltip="A function to duplicate certain place of string.">strndup</ref>(date+9,2));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="calculate_8cpp_1a05fa741986697ad3ec55a068f584c80d" kindref="member" tooltip="Core function for calculating Julian day.">gd2jd</ref>(y,m,d);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><ref refid="calculate_8cpp_1ae56c9db9e021bbe02966b285e185221e" kindref="member" tooltip="This function calculates the mean value of a image array.">GetAverage</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>arr[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>avg=0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;n;i++){</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avg=arr[i]/n;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avg;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ELEM_SWAP(a,b)<sp/>{register<sp/>float<sp/>t=(a);(a)=(b);(b)=t;<sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="102"><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><ref refid="calculate_8cpp_1a486ca264d9e2fdf49d4767ca89b06477" kindref="member" tooltip="This function is the quick_select routine based on the algorithm found in Numerical Recipes in C...">GetMedian</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>arr[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>low,<sp/>high;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>median;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>middle,<sp/>ll,<sp/>hh;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>low<sp/>=<sp/>0;<sp/>high<sp/>=<sp/>n-1;<sp/>median<sp/>=<sp/>(low<sp/>+<sp/>high)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(high<sp/>&lt;=<sp/>low)<sp/></highlight><highlight class="comment">/*<sp/>One<sp/>element<sp/>only<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arr[median]<sp/>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(high<sp/>==<sp/>low<sp/>+<sp/>1)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Two<sp/>elements<sp/>only<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr[low]<sp/>&gt;<sp/>arr[high])</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="calculate_8cpp_1a85a69dd703a28a51142294036a464907" kindref="member">ELEM_SWAP</ref>(arr[low],<sp/>arr[high])<sp/>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arr[median]<sp/>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>median<sp/>of<sp/>low,<sp/>middle<sp/>and<sp/>high<sp/>items;<sp/>swap<sp/>into<sp/>position<sp/>low<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>middle<sp/>=<sp/>(low<sp/>+<sp/>high)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr[middle]<sp/>&gt;<sp/>arr[high])</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="calculate_8cpp_1a85a69dd703a28a51142294036a464907" kindref="member">ELEM_SWAP</ref>(arr[middle],<sp/>arr[high])</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr[low]<sp/>&gt;<sp/>arr[high])</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="calculate_8cpp_1a85a69dd703a28a51142294036a464907" kindref="member">ELEM_SWAP</ref>(arr[low],<sp/>arr[high])</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr[middle]<sp/>&gt;<sp/>arr[low])</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="calculate_8cpp_1a85a69dd703a28a51142294036a464907" kindref="member">ELEM_SWAP</ref>(arr[middle],<sp/>arr[low])</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Swap<sp/>low<sp/>item<sp/>(now<sp/>in<sp/>position<sp/>middle)<sp/>into<sp/>position<sp/>(low+1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="calculate_8cpp_1a85a69dd703a28a51142294036a464907" kindref="member">ELEM_SWAP</ref>(arr[middle],<sp/>arr[low+1])<sp/>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Nibble<sp/>from<sp/>each<sp/>end<sp/>towards<sp/>middle,<sp/>swapping<sp/>items<sp/>when<sp/>stuck<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ll<sp/>=<sp/>low<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hh<sp/>=<sp/>high;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>ll++;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(arr[low]<sp/>&gt;<sp/>arr[ll])<sp/>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>hh--;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(arr[hh]<sp/>&gt;<sp/>arr[low])<sp/>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hh<sp/>&lt;<sp/>ll)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="calculate_8cpp_1a85a69dd703a28a51142294036a464907" kindref="member">ELEM_SWAP</ref>(arr[ll],<sp/>arr[hh])</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Swap<sp/>middle<sp/>item<sp/>(in<sp/>position<sp/>low)<sp/>back<sp/>into<sp/>correct<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="calculate_8cpp_1a85a69dd703a28a51142294036a464907" kindref="member">ELEM_SWAP</ref>(arr[low],<sp/>arr[hh])</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Re-set<sp/>active<sp/>partition<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hh<sp/>&lt;=<sp/>median)<sp/>low<sp/>=<sp/>ll;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hh<sp/>&gt;=<sp/>median)<sp/>high<sp/>=<sp/>hh<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ELEM_SWAP</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="161"><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="calculate_8cpp_1a876eef77c12c4bffd6163bd902abbc9f" kindref="member">GetMedianDev</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>arr[],<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>median)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>median<sp/>deviation<sp/>at<sp/>each<sp/>location<sp/>in<sp/>the<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arr[i]<sp/>=<sp/>(float)fabs(arr[i]<sp/>-<sp/>median);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="calculate_8cpp_1a486ca264d9e2fdf49d4767ca89b06477" kindref="member" tooltip="This function is the quick_select routine based on the algorithm found in Numerical Recipes in C...">GetMedian</ref>(arr,<sp/>n)<sp/>/<sp/>0.674433;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/chyan/Documents/workspace/readimage/src/calculate.cpp"/>
  </compounddef>
</doxygen>
